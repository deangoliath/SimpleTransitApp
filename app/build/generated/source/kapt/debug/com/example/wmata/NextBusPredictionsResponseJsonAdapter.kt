// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.wmata

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class NextBusPredictionsResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<NextBusPredictionsResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("StopName", "Predictions")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "stopName")

  private val listOfNextBusPredictionAdapter: JsonAdapter<List<NextBusPrediction>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, NextBusPrediction::class.java),
      emptySet(), "predictions")

  public override fun toString(): String = buildString(48) {
      append("GeneratedJsonAdapter(").append("NextBusPredictionsResponse").append(')') }

  public override fun fromJson(reader: JsonReader): NextBusPredictionsResponse {
    var stopName: String? = null
    var predictions: List<NextBusPrediction>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> stopName = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("stopName",
            "StopName", reader)
        1 -> predictions = listOfNextBusPredictionAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("predictions", "Predictions", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return NextBusPredictionsResponse(
        stopName = stopName ?: throw Util.missingProperty("stopName", "StopName", reader),
        predictions = predictions ?: throw Util.missingProperty("predictions", "Predictions",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: NextBusPredictionsResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("StopName")
    stringAdapter.toJson(writer, value_.stopName)
    writer.name("Predictions")
    listOfNextBusPredictionAdapter.toJson(writer, value_.predictions)
    writer.endObject()
  }
}
