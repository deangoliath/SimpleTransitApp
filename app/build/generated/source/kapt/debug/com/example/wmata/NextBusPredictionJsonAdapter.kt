// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.wmata

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class NextBusPredictionJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<NextBusPrediction>() {
  private val options: JsonReader.Options = JsonReader.Options.of("RouteID", "DirectionText",
      "DirectionNum", "Minutes", "VehicleID", "TripID")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "routeId")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "minutes")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "vehicleId")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("NextBusPrediction").append(')') }

  public override fun fromJson(reader: JsonReader): NextBusPrediction {
    var routeId: String? = null
    var directionText: String? = null
    var directionNum: String? = null
    var minutes: Int? = null
    var vehicleId: String? = null
    var tripId: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> routeId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("routeId",
            "RouteID", reader)
        1 -> directionText = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("directionText", "DirectionText", reader)
        2 -> directionNum = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("directionNum", "DirectionNum", reader)
        3 -> minutes = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("minutes",
            "Minutes", reader)
        4 -> vehicleId = nullableStringAdapter.fromJson(reader)
        5 -> tripId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("tripId",
            "TripID", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return NextBusPrediction(
        routeId = routeId ?: throw Util.missingProperty("routeId", "RouteID", reader),
        directionText = directionText ?: throw Util.missingProperty("directionText",
            "DirectionText", reader),
        directionNum = directionNum ?: throw Util.missingProperty("directionNum", "DirectionNum",
            reader),
        minutes = minutes ?: throw Util.missingProperty("minutes", "Minutes", reader),
        vehicleId = vehicleId,
        tripId = tripId ?: throw Util.missingProperty("tripId", "TripID", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: NextBusPrediction?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("RouteID")
    stringAdapter.toJson(writer, value_.routeId)
    writer.name("DirectionText")
    stringAdapter.toJson(writer, value_.directionText)
    writer.name("DirectionNum")
    stringAdapter.toJson(writer, value_.directionNum)
    writer.name("Minutes")
    intAdapter.toJson(writer, value_.minutes)
    writer.name("VehicleID")
    nullableStringAdapter.toJson(writer, value_.vehicleId)
    writer.name("TripID")
    stringAdapter.toJson(writer, value_.tripId)
    writer.endObject()
  }
}
